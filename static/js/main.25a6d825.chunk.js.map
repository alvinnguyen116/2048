{"version":3,"sources":["index.js"],"names":["addHexColor","c1","c2","value","hexStr","parseInt","toString","length","reduce","arr","reduced","i","push","Square","props","multiplier","temp","Math","floor","mode","style","backgroundColor","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","Board","this","squares","num","number","components","row","j","index","renderSquare","React","Component","Game","_this","Object","_mnt_c_users_alvin_nguyen_downloads_js_proj_my_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_mnt_c_users_alvin_nguyen_downloads_js_proj_my_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_mnt_c_users_alvin_nguyen_downloads_js_proj_my_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","startBoard","display","score","ArrowKeysReact","config","left","leftOrRight","right","up","upOrDown","down","direction","slice","oldScore","b","columns","arrayToColumn","map","moveUp","moveDown","columnToArr","newScore","addRandom","setState","rows","arrayToRow","rowToArr","dimension","sqrt","column","filter","item","reverse","unshift","amount","Array","fill","rand","random","emptyIndexes","history","randomIndex","indexOf","randomValue","max","prevProps","prevState","_input","focus","gameOver","cols","event","target","isNaN","numSquares","pow","_this2","status","calculateStatus","normalClass","extremeClass","class","type","min","onChange","e","handleSize","assign","events","tabIndex","autofocus","ref","c","onClick","gameMode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.25a6d825.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ArrowKeysReact from 'arrow-keys-react';\r\nimport './index.css';\r\n\r\nfunction addHexColor(c1, c2, value) {\r\n  var hexStr = ((parseInt(c1, 16) + c2*value)%16777216).toString(16);\r\n  while (hexStr.length < 6) { hexStr = '0' + hexStr; } // Zero pad.\r\n  return hexStr;\r\n}\r\n\r\nfunction reduce(arr) {\r\n  let reduced = [];\r\n  if (arr.length <= 1) {\r\n    return arr;\r\n  }\r\n  for(let i = 0; i < arr.length; i++) {\r\n    if ((i+1 <= arr.length) && (arr[i] === arr[i+1])) {\r\n      reduced.push(arr[i]*2);\r\n      i++;\r\n    } else {\r\n      reduced.push(arr[i]);\r\n    }\r\n  }\r\n  return reduced;\r\n}\r\n\r\nfunction Square(props) { //function component \r\n    let base = \"ffffff\";\r\n    const multiplier = (props.value ? props.value : 0)\r\n    let temp = addHexColor(base,15656154, Math.floor(multiplier/2));\r\n    if (props.mode === \"extreme\") {\r\n      temp = addHexColor(base,16007990, multiplier);\r\n    }\r\n    \r\n    const background = \"#\" + temp;\r\n    const style = {\r\n      backgroundColor: background,\r\n    }\r\n    return (\r\n      <button className=\"square\" style={style}\r\n      >\r\n        {props.value}\r\n      </button>\r\n    )\r\n}\r\n\r\nclass Board extends React.Component { //class component \r\n\r\n  renderSquare(i) {\r\n    return <Square\r\n      value={this.props.squares[i]}\r\n      mode={this.props.mode}\r\n    />\r\n  }\r\n\r\n  render() {\r\n    let num = this.props.number\r\n    let components = []\r\n    for (let i=0; i<num;i++) {\r\n      let row = []\r\n      for (let j=0; j<num;j++) {\r\n        let index = i*num + j;\r\n        row.push(this.renderSquare(index));\r\n      }\r\n      components.push(<div className=\"board-row\">{row}</div>)\r\n    }\r\n    return (<div>{components}</div>);\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    // this.randomValue = this.randomValue.bind(this);\r\n    // this.addRandom = this.addRandom.bind(this);\r\n    this.state = {\r\n      squares: this.startBoard(1, 2, 'normal'),\r\n      number: 2,\r\n      display: 2,\r\n      score: 0,\r\n      mode: 'normal',\r\n    }\r\n\r\n  ArrowKeysReact.config({\r\n      left: () => {\r\n        this.leftOrRight(\"left\");\r\n      },\r\n      right: () => {\r\n        this.leftOrRight(\"right\");\r\n      },\r\n      up: () => {\r\n        this.upOrDown(\"up\");\r\n      },\r\n      down: () => {\r\n        this.upOrDown(\"down\");\r\n      }\r\n    }); \r\n  }\r\n\r\n  upOrDown(direction) {\r\n    let squares = this.state.squares.slice();\r\n    let oldScore = squares.reduce((a,b)=> a+b)\r\n    let columns = this.arrayToColumn(squares);\r\n    if (direction === \"up\") {\r\n      columns = columns.map(this.moveUp);\r\n    } else if (direction === \"down\") {\r\n      columns = columns.map(this.moveDown);\r\n    }\r\n    squares = this.columnToArr(columns);\r\n    squares = this.addRandom(squares, Math.floor(this.state.number/2), this.state.mode);\r\n    let newScore = squares.reduce((a,b) => a + b)\r\n\r\n    this.setState({squares: squares, score: this.state.score + (newScore - oldScore)});\r\n  }\r\n\r\n  leftOrRight(direction) {\r\n    let squares = this.state.squares.slice();\r\n    let rows = this.arrayToRow(squares);\r\n    // console.log(rows);\r\n    if (direction === \"left\") {\r\n      rows = rows.map(this.moveUp);\r\n    } else if (direction === \"right\") {\r\n      rows = rows.map(this.moveDown);\r\n    }\r\n    squares = this.rowToArr(rows);\r\n\r\n    squares = this.addRandom(squares, Math.floor(this.state.number/2), this.state.mode);\r\n    this.setState({squares: squares});\r\n  }\r\n\r\n  arrayToColumn(arr) {\r\n    let columns = []\r\n    const dimension = Math.sqrt(arr.length);\r\n    for (let i = 0; i < dimension; i++) {\r\n      let column = []\r\n      for (let j = 0; j < dimension; j++) {\r\n        column.push(arr[i + dimension*j]);\r\n      }\r\n      columns.push(column);\r\n    }\r\n    return columns;\r\n  }\r\n\r\n  arrayToRow(arr) {\r\n    let rows = []\r\n    const dimension = Math.sqrt(arr.length);\r\n    for (let i = 0; i < dimension; i++) {\r\n      let row = []\r\n      for (let j = 0; j < dimension; j++) {\r\n        row.push(arr[i*dimension + j]);\r\n      }\r\n      rows.push(row);\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  columnToArr(columns) {\r\n    let arr = [];\r\n    const dimension = columns.length;\r\n    for (let i = 0; i < dimension; i++) {\r\n      for (let j = 0; j < dimension; j++) {\r\n        arr.push(columns[j][i]);\r\n      }\r\n    }\r\n    return arr;\r\n  }\r\n\r\n  rowToArr(rows) {\r\n    let arr = []\r\n    const dimension = rows.length;\r\n    for (let i = 0; i < dimension; i++) {\r\n      for (let j = 0; j < dimension; j++) {\r\n        arr.push(rows[i][j]);\r\n      }\r\n    }\r\n    return arr;\r\n  }\r\n\r\n  moveDown(arr) {\r\n    const length = arr.length; \r\n    arr = arr.filter((item)=> item != null);\r\n    arr = arr.reverse();\r\n    arr = reduce(arr);\r\n    arr = arr.reverse();\r\n    while (arr.length !== length) {\r\n      arr.unshift(null);\r\n    }\r\n    // console.log(arr);\r\n    return arr;\r\n  }\r\n\r\n  moveUp(arr) { //move arr towards top, add if possible \r\n\r\n    const length = arr.length; \r\n    arr = arr.filter((item)=> item != null);\r\n    arr = reduce(arr);\r\n    while (arr.length !== length) {\r\n      arr.push(null);\r\n    }\r\n    return arr;\r\n  }\r\n\r\n  startBoard(amount, number, mode) {\r\n    let arr = Array(number).fill(null);\r\n    arr = this.addRandom(arr, amount, mode);\r\n    return arr; \r\n  }\r\n\r\n  randomValue(mode) { // change later for fun??? \r\n    let rand = Math.random();\r\n    if (mode === \"normal\") {\r\n      if (rand < .5) {\r\n        return 2 \r\n      } else {\r\n        return 4\r\n      }\r\n    } else if (mode === \"extreme\") {\r\n      if (rand < .5) {\r\n        return 1 \r\n      } else {\r\n        return 3\r\n      }\r\n    }\r\n  }\r\n\r\n  addRandom(arr, amount, mode) {\r\n\r\n    \r\n    let emptyIndexes = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n      if (!arr[i]) {\r\n        emptyIndexes.push(i);\r\n      }\r\n    }\r\n\r\n    let number = emptyIndexes.length;\r\n    let history = [];\r\n    while (amount && number) {\r\n      let index = this.randomIndex(number)\r\n      if (history.indexOf(index) === -1) {\r\n        arr[emptyIndexes[index]] = this.randomValue(mode);\r\n        amount--;\r\n        number--; \r\n        history.push(index);\r\n      }\r\n    }\r\n    return arr;\r\n  }\r\n\r\n  randomIndex(max) {\r\n    return Math.floor(Math.random()*(max - 1));\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    this._input.focus();\r\n  } \r\n\r\n  calculateStatus() {\r\n    let gameOver = false\r\n    let squares = this.state.squares; \r\n    const empty = squares.filter((item)=> item == null);\r\n    if (empty.length === 0) {\r\n      gameOver = []\r\n      let rows = this.arrayToRow(squares);\r\n      rows = rows.map(reduce)\r\n\r\n      for (let i = 0; i < rows.length; i++) {\r\n        if (rows[i].length < this.state.number) {\r\n          gameOver.push(false)\r\n          break;\r\n        }\r\n      }\r\n      let cols = this.arrayToColumn(squares);\r\n      cols = cols.map(reduce)\r\n      for (let i = 0; i < cols.length; i++) {\r\n        if (cols[i].length < this.state.number) {\r\n          gameOver.push(false)\r\n          break;\r\n        }\r\n      }\r\n      if (gameOver.length === 0) {\r\n        gameOver = true;\r\n      } else {\r\n        gameOver = false;\r\n      }\r\n    }\r\n    let score = squares.reduce((a,b)=> a+b)   \r\n    return [gameOver, score]\r\n  }\r\n\r\n  handleSize(event) {\r\n    let value = parseInt(event.target.value);\r\n    if (isNaN(value)) {\r\n      this.setState({display: ''});\r\n    }\r\n    if (value > 0 ) {\r\n      let numSquares = value**2;\r\n      let amount = Math.floor(value/2);\r\n      this.setState({number: value, display: value, squares: this.startBoard(amount, numSquares, this.state.mode)});\r\n    } \r\n  }\r\n\r\n  gameMode(mode) {\r\n    let amount = Math.floor(this.state.number/2)\r\n    let number = this.state.number**2\r\n    if (mode === \"normal\") {\r\n      if (this.state.mode === \"extreme\") {\r\n        let squares = this.startBoard(amount, number, 'normal');\r\n        this.setState({mode: \"normal\", squares: squares});\r\n      }\r\n    } else if (mode === \"extreme\") {\r\n      if (this.state.mode === \"normal\") {\r\n        let squares = this.startBoard(amount, number, 'extreme');\r\n        this.setState({mode: \"extreme\", squares: squares});\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let number = this.state.number\r\n    let display = this.state.display\r\n    let status = this.calculateStatus();\r\n    let normalClass = \"col-6\"\r\n    let extremeClass = \"col-6\"\r\n    if (this.state.mode === \"normal\") {\r\n      normalClass += \" active\"\r\n    } else if (this.state.mode === \"extreme\") {\r\n      extremeClass += \" active\"\r\n    }\r\n    if (status[0]) {\r\n      return (\r\n      <div className=\"game\" >\r\n        <div className=\"game-board\">\r\n          <Board squares={this.state.squares} number={number} mode={this.state.mode}/>\r\n        </div>\r\n        <div>\r\n          <div class=\"status\">{\"No more moves.\"}</div>\r\n          <div class=\"status\">{\"Final Score:\" + this.state.score}</div>\r\n          <div class=\"row slider\">\r\n            <div class=\"col-4\">{\"Board Size: \"}</div>\r\n            <input type=\"range\" min=\"2\" max=\"10\" value={display} class=\"slider\" onChange={(e)=>this.handleSize(e)}/>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-4\">{\"Keyboard Events: \"}</div> \r\n            <input class=\"col-4\" type=\"text\" {...ArrowKeysReact.events} tabIndex=\"1\" autofocus=\"true\"\r\n              ref={c => (this._input = c)}/>\r\n          </div>\r\n          <div class=\"row\">\r\n              <p class={normalClass} onClick={()=>this.gameMode(\"normal\")}>{\"Normal\"}</p>\r\n              <p class={extremeClass} onClick={()=>this.gameMode(\"extreme\")}>{\"Extreme\"}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n    } else {\r\n      return (\r\n        <div className=\"game\" >\r\n          <div className=\"game-board\">\r\n            <Board squares={this.state.squares} number={number} mode={this.state.mode}/>\r\n          </div>\r\n          <div>\r\n            <div class=\"status\">{\"Score: \" + this.state.score}</div>\r\n            <div class=\"row slider\">\r\n              <div class=\"col-4\">{\"Board Size: \"}</div>\r\n              <input type=\"range\" min=\"2\" max=\"10\" value={display} class=\"slider\" onChange={(e)=>this.handleSize(e)}/>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-4\">{\"Keyboard Events: \"}</div> \r\n              <input class=\"col-4\" type=\"text\" {...ArrowKeysReact.events} tabIndex=\"1\" autofocus=\"true\"\r\n              ref={c => (this._input = c)}/>\r\n            </div>\r\n            <div class=\"row\">\r\n              <p class={normalClass} onClick={()=>this.gameMode(\"normal\")}>{\"Normal\"}</p>\r\n              <p class={extremeClass} onClick={()=>this.gameMode(\"extreme\")}>{\"Extreme\"}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game/>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}